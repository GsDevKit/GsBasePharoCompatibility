#!/usr/bin/env superdoit_stone
# Standard options are always present unless customoptions section is used
#
#options
#{
#  SuperDoitOptionalOptionWithNoArg long: 'help' short: 'h'.
#  SuperDoitOptionalOptionWithNoArg long: 'debug' short: 'D'.
#}
#%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
usage
-----
USAGE
      # with GS_HOME env var set
      $basename [--help | -h] [--debug | -D] [-- [<stone-name> [<topaz-command-line-args>] ] ]
      # with GEMSTONE env var set
      $basename [--help | -h] [--debug | -D] --  -l -I <path-to-.topazini-file>

DESCRIPTION
  Script to create the Rowan project metadata for the GsBasePharoCompatibility project ... 

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename -h -- rowan_361
  $basename -h -- -l -I .topazini

  $basename -D -- rowan_361
  $basename -D -- -l -I .topazini

  $basename -- rowan_361
  $basename -- -l -I .topazini
-----
%
doit
	| projectName componentName commonPackageNames definedProject testPackageNames testsComponent |

	projectName := 'GsBasePharoCompatibility'.
	componentName := 'Core'.
	commonPackageNames := 	{
			'GsBasePharoCompatibility-Core'.
		}.
	testPackageNames := { 
			'GsBasePharoCompatibility-Tests'.
		}.

	('$ROWAN_PROJECTS_HOME' asFileReference / projectName / 'rowan') ensureDeleteAll.

	definedProject := Rowan newProjectNamed: projectName.
	definedProject
		gemstoneSetDefaultSymbolDictNameTo: 'Globals';
		repoType: #git;	
		customConditionalAttributes: #('tests' );
		packageFormat: 'tonel';
		packageConvention: 'RowanHybrid';
		yourself.
	definedProject addTopLevelComponentNamed: componentName.
	commonPackageNames do: [:packageName |
			definedProject 
				addPackageNamed: packageName
				toComponentNamed: componentName ].

	testsComponent := definedProject
		addSimpleNestedComponentNamed: 'tests/tests' 
		condition: 'tests' 
		comment: ''.
	testPackageNames do: [:packageName |
			definedProject 
				addPackageNamed: packageName
				toComponentNamed: testsComponent name ].
	definedProject 
		addComponentNamed: testsComponent name 
		toComponentNamed: componentName.

	definedProject resolve	"create or attach to existing repository"
		write.		"write to disk"

	^ self noResult
%
